"Multiline comment
Hello"
"Another Multiline comment
Hello"
enum colours:
    RED = 144,
    GREEN,
    BLUE = 59,Another=GREEN+9
type a = def(int)->int
type g = def(int)
static int var_static = 8
static def staticfunc():
    printf("Hello from static function\n")
    printf("Static var is %d\n",var_static)
union name:
    int item1
    float item2
def divide(int num1,int num2)->int:
    match num2:
        case 0:
            raise error.ZeroDivisionError
        case _:
            return num1/num2
def decorator(a func)->g:
    int h=9
    def value(int c):
        h=8
        printf("%d\n",h)
        printf("Answer is %d\n",func(c))
    return value
int ggggggg=9
@decorator
def dec_test(int x)->int:
    ggggggg=7#mutability test
    printf("%d\n",ggggggg)
    @decorator
    def nested_test(int x)->int:
        ggggggg=7#mutability test
        printf("%d\n",ggggggg)
        def nested_test2(int x)->int:
            ggggggg=7#mutability test
            printf("%d\n",ggggggg)
            return x*x
        nested_test2(7)
        return x*x
    nested_test(7)
    return x*x
@decorator
static def static_dec_test(int x)->int:
    printf("Static decorator\n")
    ggggggg=7#mutability test
    printf("%d\n",ggggggg)
    @decorator
    def nested_test(int x)->int:
        ggggggg=7#mutability test
        printf("%d\n",ggggggg)
        def nested_test2(int x)->int:
            ggggggg=7#mutability test
            printf("%d\n",ggggggg)
            return x*x
        nested_test2(7)
        return x*x
    nested_test(7)
    return x*x
def test(int x)->int:#this is comment
    return x
def lambda_test(a x):
    printf("The value is %d\n",x(5))
def func(int g)->int:
    return g
static inline def static_inline_func():
    printf("Hello from static inline function\n")
inline def inline_func():
    printf("Hello from inline function\n")
def main():
    colours enum_test=colours.RED
    static_inline_func()
    inline_func()
    staticfunc()
    dec_test(4)
    static_dec_test(4)
    def z()->int:
        printf("hello\n")
        return 5
    printf("value of z() is %d\n",z())
    Cppcode(#ifdef _WIN32)
    printf("On windows\n")
    Cppcode(#elif __linux__)
    printf("On linux\n")
    Cppcode(#endif)
    scope:
        printf("Hello from new scope\n")
    bool x=False
    const bool cc=False
    x=True
    bool y
    y=True
    if x==y:
        pass
    printf("%d\n",test(0))
    int a=0
    int b=7
    int c=7
    match a,b,c:
        case 5,7,8:
            printf("a is 5,b is 7 and c is 8")
        case 4,7,_:#c can be anything
            printf("a is 4 but b is 7")
            break  #we dont want default to execute 
        case 4,_,7:#b can be anything
            printf("a is 4 but c is 7")
            break  #we dont want default to execute 
        case 8,_:#b and c can be anything
            printf("a is 8")
        case _:
            printf("idk")
        #optional
        default:#will be executed at the end if no break
            printf("\nHello\n")
    lambda_test(func)
    assert 8==8
    name var1
    var1.item1=8
    printf("item1 of var1 is %d\n",var1.item1)
    var1.item2=6.8
    printf("item2 of var1 is %f\n",var1.item2)
    #should throw an error
    #assert 8==6
    printf("%d\n",divide(6,2))
    #should terminate the program
    #printf("%d",divide(6,0))